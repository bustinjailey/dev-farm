# Use Debian bookworm-slim as the base image (stable and lightweight)
FROM debian:bookworm-slim

USER root

# Install necessary packages
RUN apt-get update && apt-get install -y \
  apt-transport-https \
  wget \
  curl \
  gnupg2 \
  git \
  sudo \
  nano \
  build-essential \
  python3 \
  python3-pip \
  nodejs \
  npm \
  sshfs \
  fuse3 \
  sshpass \
  ca-certificates \
  && apt-get clean autoclean \
  && apt-get autoremove --yes \
  && rm -rf /var/lib/{apt,dpkg,cache,log}/

# Add the Microsoft GPG key and repository (updated method for Debian Bookworm)
RUN mkdir -p /etc/apt/keyrings \
  && wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /etc/apt/keyrings/packages.microsoft.gpg \
  && chmod a+r /etc/apt/keyrings/packages.microsoft.gpg \
  && echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list

# Install official VS Code CLI (code)
RUN apt-get update && apt-get install -y code \
  && apt-get clean autoclean \
  && apt-get autoremove --yes \
  && rm -rf /var/lib/{apt,dpkg,cache,log}/

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
  && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
  && apt-get update \
  && apt-get install -y gh \
  && rm -rf /var/lib/apt/lists/*

# Install additional useful tools
RUN npm install -g yarn typescript ts-node prettier eslint

# Create a non-root user 'coder' (matching previous setup)
RUN useradd -m -s /bin/bash coder \
  && echo 'coder ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/coder \
  && chmod 0440 /etc/sudoers.d/coder \
  && usermod -aG sudo coder

# Create workspace directories
RUN mkdir -p /workspace && chown -R coder:coder /workspace \
  && mkdir -p /home/coder/workspace && chown -R coder:coder /home/coder/workspace

# Enable user_allow_other for FUSE and add coder to fuse group
RUN echo "user_allow_other" >> /etc/fuse.conf || true \
  && usermod -aG fuse coder || true

USER coder

# Set the home directory for the non-root user
ENV HOME=/home/coder
WORKDIR /home/coder/workspace

# Set up VS Code data directories
RUN mkdir -p /home/coder/.vscode-server/data \
  && mkdir -p /home/coder/.vscode-server/extensions \
  && mkdir -p /home/coder/.config/Code/User

# Pre-install VS Code extensions in the image to speed up container startup
# This avoids reinstalling extensions every time a container starts
RUN /usr/bin/code --install-extension github.copilot && \
  /usr/bin/code --install-extension github.copilot-chat && \
  /usr/bin/code --install-extension ms-vscode-remote.remote-ssh && \
  /usr/bin/code --install-extension vscode.markdown-language-features && \
  /usr/bin/code --install-extension vscode.markdown-math && \
  echo "Extensions pre-installed in image"

# Pre-configure VS Code settings (MCP configuration)
COPY --chown=coder:coder docker/config/mcp.json /home/coder/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/mcp.json

# Include a workspace settings template to seed per-workspace settings at runtime
RUN mkdir -p /home/coder/.devfarm
COPY --chown=coder:coder docker/config/workspace-settings.json /home/coder/.devfarm/workspace-settings.json.template

# Create startup script for GitHub authentication and configuration
COPY --chown=coder:coder docker/config/startup.sh /home/coder/startup.sh
RUN chmod +x /home/coder/startup.sh

EXPOSE 8080

# Add health check to properly detect when VS Code Server web UI is ready
# This ensures containers show as "running" only when truly ready (fixes "STARTING" status issue)
# start-period allows time for extension installation before health checks matter
HEALTHCHECK --interval=5s --timeout=3s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/ || exit 1

# Override the entrypoint to use our startup script
ENTRYPOINT []
CMD ["/bin/bash", "/home/coder/startup.sh"]
